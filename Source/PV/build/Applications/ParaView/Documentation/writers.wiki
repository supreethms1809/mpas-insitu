
==ADIOSWriter==

Write ADIOS BP files using VTKs schema.
Writer to write ADIOS BP files using a VTK specific schema


{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkCompositeDataSet
* vtkDataSet
|-
|'''TransportMethod''' (TransportMethod)
|

Select the specific ADIOS backend write method to use.

|
1
|
The value(s) is an enumeration of the following:
* NULL (0)
* POSIX (1)
* MPI (2)
* MPILustre (3)
* MPIAggregate (4)
* VarMerge (5)
* DataSpaces (6)
* DIMES (7)
* FlexPath (8)
* PHDF5 (9)
* NetCDF4 (10)
|-
|'''TransportMethodArguments''' (TransportMethodArguments)
|

Configuration parameters to pass to the specified ADIOS backend.

|

|

|-
|'''CompressionMethod''' (CompressionMethod)
|

Select the specific array compression method to use.

|
0
|
The value(s) is an enumeration of the following:
* None (0)
* ZLib (1)
* BZip2 (2)
* SZip (3)
|-
|'''FileName''' (FileName)
|
The name of the file to write to.
|

|

|-
|'''WriteAllTimeSteps''' (WriteAllTimeSteps)
|
When WriteAllTimeSteps is turned ON, the writer is
executed once for each time step available from the
reader.
|
0
|
Accepts boolean values (0 or 1).

|}

==AnimationSceneImageWriter==

Internal writer to used paraview uses when it disconnects
the GUI.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Magnification''' (Magnification)
|
The magnification factor to use for the saved
animation.
|
1
|

|-
|'''FileName''' (FileName)
|
The name of the file to save the animation
into.
|

|

|-
|'''FrameRate''' (FrameRate)
|
Get/Set the frame rate to use for saving the animation.
This frame rate is the frame rate that gets saved in the movie file
generated, if applicable. If does not affect the FrameRate set on the
animation scene at all. In other words, this is the playback frame rate
and not the animation generation frame rate.
|
0
|

|-
|'''PlaybackTimeWindow''' (PlaybackTimeWindow)
|
Time range to write
|
-1 1
|

|-
|'''Compression''' (Compression)
|
Turns on(the default) or off compression for FFMEG
(AVI on Linux and Mac) backend.

|
1
|
Accepts boolean values (0 or 1).
|-
|'''StartFileCount''' (StartFileCount)
|

|
0
|


|}

==CSVWriter==

Writer to write CSV filesWriter to write CSV
files from table. In parallel, it delivers the table to the root node and
then saves the CSV. For composite datasets, it saves multiple csv
files.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkTable
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|

|-
|'''WriteAllTimeSteps''' (WriteAllTimeSteps)
|
When WriteAllTimeSteps is turned ON, the writer is
executed once for each time step available from the
reader.
|
0
|
Accepts boolean values (0 or 1).

|}

==DataSetCSVWriter==

Writer to write CSV filesWriter to write CSV
files from any dataset. Set FieldAssociation to choose whether cell
data/point data needs to be saved. In parallel, it delivers the table to
the root node and then saves the CSV. For composite datasets, it saves
multiple csv files.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkDataSet
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|

|-
|'''WriteAllTimeSteps''' (WriteAllTimeSteps)
|
When WriteAllTimeSteps is turned ON, the writer is
executed once for each timestep available from the
reader.
|
0
|
Accepts boolean values (0 or 1).

|}

==DataSetWriter==

Write any type of data object in a legacy vtk data file.
Writer to write any type of data object in a legacy vtk data file. Cannot
be used for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkDataObject

|}

==EnSightWriter==

Write unstructured grid data as an EnSight file.
Writer to write unstructured grid data as an EnSight file. Binary files
written on one system may not be readable on other systems. Be sure to
specify the endian-ness of the file when reading it into
EnSight.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkUnstructuredGrid

|}

==ExodusIIWriter==

Write Exodus II files.Writer to write Exodus
II files. Refere to http://endo.sandia.gov/SEACAS/ for more information
about the Exodus II format.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkCompositeDataSet
* vtkDataSet
|-
|'''WriteAllTimeSteps''' (WriteAllTimeSteps)
|
When WriteAllTimeSteps is turned ON, the writer is
executed once for each time step available from the
reader.
|
0
|
Accepts boolean values (0 or 1).

|}

==JPEGWriter==

Write image data as a JPEG file.
Writer to write image data as a JPEG file. It supports 1 to 3 component
data of unsigned char or unsigned short.
This Writer can also generate a stack of images when the FileName is in
the form of /path/file_%03d.jpg and that the input data is a 3D image
data.


{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkImageData
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|


|}

==JSONImageWriter==

Write image data as a JSON file.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkImageData
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|

|-
|'''ArrayName''' (ArrayName)
|
The name of the field to export. If Empty all fields will be saved.
|

|

|-
|'''Slice''' (Slice)
|
Write only one slice if slice &gt;= 0
|
-1
|


|}

==MetaImageWriter==

Write a binary UNC meta image data.Writer to
write a binary UNC meta image data. This is a fairly simple yet powerful
format consisting of a text header and a binary data section. MetaImage
headers are expected to have extension: ".mha" or ".mhd"

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkImageData
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|


|}

==PDataSetWriter==

Writer that writes polydata as legacy vtk files.
Writer to write any type of data object in a legacy vtk data file. This
version is used when running in parallel. It gathers data to first node
and saves one file.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkDataObject
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|

|-
|'''WriteAllTimeSteps''' (WriteAllTimeSteps)
|
When WriteAllTimeSteps is turned ON, the writer is
executed once for each timestep available from the
reader.
|
0
|
Accepts boolean values (0 or 1).

|}

==PNGWriter==

Write image data as a PNG file.Writer to
write image data as a PNG file. It supports 1 to 4 component data of
unsigned char or unsigned short.
This Writer can also generate a stack of images when the FileName is in
the form of /path/file_%03d.png and that the input data is a 3D image
data.


{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkImageData
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|


|}

==PPLYWriter==

Write polygonal data in Stanford University PLY format.
Writer to write polygonal data in Stanford University PLY format. The
data can be written in either binary (little or big endian) or ASCII
representation. As for PointData and CellData, vtkPLYWriter cannot handle
normals or vectors. It only handles RGB PointData and CellData. This
version is used when running in parallel. It gathers data to first node
and saves one file.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkPolyData
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|


|}

==PSTLWriter==

Write stereo lithography files.STLWriter
writes stereo lithography (.stl) files in either ASCII or binary form.
Stereo lithography files only contain triangles. If polygons with more
than 3 vertices are present, only the first 3 vertices are written. Use
TriangleFilter to convert polygons to triangles. This version of the
reader is used when running in parallel. It gathers all the geometry to
first node and saves 1 file.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkPolyData
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|


|}

==XMLDataSetWriterBase==

Base for all XML-based file-series
writers.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''


|}

==XMLHierarchicalBoxDataWriter==

(DEPRECATED) Write a hierarchical box dataset in a xml-based vtk data file.
(DEPRECATED) Writer to write a hierarchical box in a xml-based vtk data file. Can be
used for parallel writing as well as serial writing. This is deprecated.
Use XMLUniformGridAMRWriter instead.


{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''


|}

==XMLHyperOctreeWriter==

Write unstructured grid in a xml-based vtk data file.
Writer to write unstructured grid in a xml-based vtk data file. Cannot be
used for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkHyperOctree

|}

==XMLImageDataWriter==

Write image data in a xml-based vtk data file.
Writer to write image data in a xml-based vtk data file. Cannot be used
for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkImageData

|}

==XMLMultiBlockDataWriter==

Write a multiblock in a xml-based vtk data file.
Writer to write a multiblock dataset in a xml-based vtk data file. Can be
used for parallel writing as well as serial writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkMultiBlockDataSet

|}

==XMLPImageDataWriter==

Write image data in a xml-based vtk data file.
Writer to write image data in a xml-based vtk data file. Can be used for
parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkImageData

|}

==XMLPPolyDataWriter==

Write polydata in a xml-based vtk data file.
Writer to write polydata in a xml-based vtk data file. Can be used for
parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkPolyData

|}

==XMLPRectilinearGridWriter==

Write rectilinear grid in a xml-based vtk data file.
Writer to write rectilinear grid in a xml-based vtk data file. Can be
used for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkRectilinearGrid

|}

==XMLPStructuredGridWriter==

Write structured grid in a xml-based vtk data file.
Writer to write structured grid in a xml-based vtk data file. Can be used
for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkStructuredGrid

|}

==XMLPUnstructuredGridWriter==

Write unstructured grid in a xml-based vtk data file.
Writer to write unstructured grid in a xml-based vtk data file. Can be
used for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkUnstructuredGrid

|}

==XMLPVAnimationWriter==

Internal writer proxy used when saving animation geometry
to save all parts of the current source to the file with pieces spread
across the server processes.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Representations''' (Representations)
|
The input filter/source whose output dataset is to
written to the file.
|

|

|-
|'''FileName''' (FileName)
|
Name of the file to write.
|

|

|-
|'''WriteTime''' (WriteTime)
|
Write each time step in the animation
|
0.0
|

|-
|'''ErrorCode''' (ErrorCode)
|

|

|


|}

==XMLPVDWriter==

Write ParaView data files (pvd).Writer to
write ParaView data files (pvd). It is used to save all pieces of a
source/filter to a file with pieces spread across the server
processes.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the files.
|

|
Accepts input of following types:
* vtkDataSet
|-
|'''HeaderType''' (HeaderType)
|
Set the binary data header word type. The default is
UInt32. Set to UInt64 when storing arrays requiring 64-bit indexing.

|
64
|
The value(s) is an enumeration of the following:
* UInt32 (32)
* UInt64 (64)
|-
|'''DataMode''' (DataMode)
|
The mode uses for writing the file's data i.e. ascii,
binary, appended binary.
|
2
|
The value(s) is an enumeration of the following:
* Ascii (0)
* Binary (1)
* Appended (2)
|-
|'''EncodeAppendedData''' (EncodeAppendedData)
|
When EncodeAppendedData is turned ON, the writer uses
base64 encoding when writing binary data (only if appended mode is
selected).
|
0
|
Accepts boolean values (0 or 1).
|-
|'''CompressorType''' (CompressorType)
|
The compression algorithm used to compress binary data
(appended mode only).
|
0
|
The value(s) is an enumeration of the following:
* None (0)
* ZLib (1)

|}

==XMLPolyDataWriter==

Write poly data in a xml-based vtk data file.
Writer to write poly data in a xml-based vtk data file. Cannot be used
for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkPolyData

|}

==XMLRectilinearGridWriter==

Write rectilinear grid in a xml-based vtk data file.
Writer to write rectilinear grid in a xml-based vtk data file. Cannot be
used for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkRectilinearGrid

|}

==XMLStructuredGridWriter==

Write structured grid in a xml-based vtk data file.
Writer to write structured grid in a xml-based vtk data file. Cannot be
used for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkStructuredGrid

|}

==XMLUniformGridAMRWriter==

Write a amr dataset in a xml-based vtk data file.
Writer to write an AMR data-set (overlapping/non-overlapping)
in a xml-based vtk data file. Can be used for parallel writing as well as
serial writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkUniformGridAMR

|}

==XMLUnstructuredGridWriter==

Write unstructured grid in a xml-based vtk data file.
Writer to write unstructured grid in a xml-based vtk data file. Cannot be
used for parallel writing.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkUnstructuredGrid

|}

==Xdmf3Writer==

Write data in Xdmf files.Writer to write
data in eXtensible Data Model and Format *(XDMF) files.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkDataSet
* vtkGraph
|-
|'''WriteAllTimeSteps''' (WriteAllTimeSteps)
|
When WriteAllTimeSteps is turned ON, the writer is
executed once for each time step available from the
reader.
|
0
|
Accepts boolean values (0 or 1).
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|


|}

==XdmfWriter==

Write data in Xdmf files.Writer to write
data in eXtensible Data Model and Format *(XDMF) files.

{| class="PropertiesTable" border="1" cellpadding="5"
|-
| '''Property'''
| '''Description'''
| '''Default Value(s)'''
| '''Restrictions'''

|-
|'''Input''' (Input)
|
The input filter/source whose output dataset is to
written to the file.
|

|
Accepts input of following types:
* vtkDataSet
|-
|'''FileName''' (FileName)
|
The name of the file to be written.
|

|


|}

